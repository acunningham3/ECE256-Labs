\documentclass[12pt]{article}
\usepackage[utf8]{inputenc}
\usepackage[margin=1in]{geometry}
\usepackage{times}
\usepackage{setspace}
\usepackage{graphicx}
\usepackage{caption}
\usepackage{subcaption}

\linespread{1}
\setlength{\parindent}{0.5in}

\newcommand\tab[1][0.5in]{\hspace*{#1}}
\renewcommand*{\thefootnote}{\arabic{footnote}}

% Cover
\title{\vspace{-3cm}
    \rule{\linewidth}{0.5mm} \\
    \huge {ECE 256: Foundations of Cyber Security } \\ [18pt]
    \large Lab 5: Code Injections \\
    \rule{\linewidth}{0.5mm} \\[0.25in]
    \date{}
}

\begin{document}
\clearpage\maketitle
\begin{center}
\Large We certify that this work is original and not a product of anyoneâ€™s work but our own \\ [1.25in]

\noindent\begin{tabular}{ll}
\centering
    \makebox[3in]{\hrulefill} & \makebox[3in]{\hrulefill}\\
    \large{Adam Cunningham (acunningham3)} & \large{Julia Sorrentino (juliasorrentino)}\\[8ex]
\end{tabular}
\noindent\begin{tabular}{l}
    \makebox[3in]{\hrulefill}\\
    \large{Quintin Carvalho (Quintin Carvalho)}\\[20ex]
\end{tabular}

\date{\Large Submitted: December 10, 2018 \\ \Large Due: December 10, 2018} \\[1.25in]
\thispagestyle{empty}
\end{center} 

% Contents
\newpage\setcounter{page}{1} 
\tableofcontents
\listoffigures
\listoftables
\newpage

%Abstract
\renewcommand*\abstractname{\Large\textbf{Abstract}}
\begin{abstract}
\setlength{\parindent}{0.5in}
\linespread{1}\selectfont\normalsize\noindent
\indent This lab report involves using a free emulator, VisualBoy Advance, in conjunction with the ROM for the game Powder. The goal of the game is to make it to level 25 in the dungeon to reach Baezl'bub. The user must slay him and return to the surface with his black heart. Through the use of these resources students will complete two main tasks. First, explore the memory by value to find the memory locations of the values displayed on the bottom of the main screen. Secondly, design cheats to make the character invincible. The students should make the game so that anyone could play it and beat it.

\end{abstract}

% Introduction
\section{Introduction}


%Methods
\section{Methods and Procedures}
First and foremost, the lab group became acquainted with the controls of the game through playing the game itself as well as the included tutorial within the game. Powder works as follows: The character moves around in a linear, single space direction. Monsters that lay in the path will be automatically attacked if the player is within one space. Monsters can also hurt the player if they become too close. Seen items can be picked up by placing the character on top of it and using the automatically generated menu to either pick up the item or to ignore it. Some items in this game are good for the player, while others are not. \\
\indent Powder is an emulated game that has been developed for the Game Boy Advance console. The chosen emulator for this lab is Visual Boy Advance, an emulator that can run Game Boy Advance games. This means that the controls on a regular Game Boy Advance console - A, B, Select, Start, Right Trigger, Left Trigger, and the Directional Pad - are mapping to a default of keys on the computer keyboard. The Z key is A, the X key is B, the A key is Left Trigger, the S key is Right Trigger, the Backspace key is Select, and the Enter key is Start. The Arrow keys on the keyboard are mapped to the Directional Pad respectively, and the Escape key will also completely close out the game. \\
\indent In Powder the keys correspond to different things. The S key opens the mini-map, the Backspace key opens/closes the inventory, the Enter key pauses the game. These three keys, alone with the Arrow keys, were mainly used to traverse the game effectively. \\
\indent Since this game is being emulated on the Visual Boy Advance, the group of students have even more tools at their fingertips. For the purpose of this lab, the emulator's Cheat Finder and Memory Viewer proved very usual in completing the assigned tasks. Another tool that proved helpful were save states. These states can save the game in the current state that it is in and later be returned to. This is very useful for when the character unexpectedly dies or the game crashes; mainly helping to return to where the students were last at as to not waste time creating a new game every time this happened.

\subsection{Explore Memory}
The bottom of the window shows information about the character. The first part of the lab requires students to find the memory locations of these values. The memory viewer allows students to view all of the memory addresses of the game and change them. When viewing the memory student will want to select WRAM from the drop down menu as well as change the display to 8-bit. To access the memory viewer students should go to tools-\textgreater cheats-\textgreater memory viewer. In addition, students should use the find cheats window by going to tools-\textgreater cheats-\textgreater find cheats. This window will allow them to search for specific changes in the memory to pinpoint specific memory locations. Note, that this window cannot remain open when playing the game. Upon using this memory search engine it was found that each of these bottom values are adjacent in memory. Shown below is the main trial and error memory testing used to find specific cheats and memory addresses. \\

\begin{figure}[h!]
    \centering
    \includegraphics[width = 350]{Pictures/Memory-Testing.PNG}
    \caption{Memory viwer window}
    \label{fig:my_label}
\end{figure} \\

\indent Starting at memory address 0x00000020 the students plugged in a value of 0xFF to each of the memory addresses. As this was done the students checked the game for distinguishable changes. Most of the time this method made the game crash and the students needed to reload the game.

\subsection{Play in GOD Mode}
Playing in GOD mode refers to having infinite health during play-time and not being able to die. So, this change mainly refers to the health of the player. Knowing this the students used the Find Cheats tool within the emulator. First searching for the base value health that the player spawns with (15) and then monitoring that value as it changes. This means the students will need to have some damage done to them to search for a second value. If this value of 15 was to go down to 11 from a monster attacking the character, then the students would then search for 11 in the Find Cheats tool. This next search will help to pinpoint the specific memory address that holds this health value. Upon multiple searches the students were able to find the memory address 0x0200B7D0. Since this memory address is an 8-bit value, a maximum hex value of 0xFF can be put into the address. In binary this translates to 255. Changing the value to 0xFF it can be seen that the in game health changes from 15 to 255 as expected. A pleasant side effect of this change is that the health value will stay at 255 even if the player is hurt. Below are screen shots of this change. \\

\begin{figure}[h!]
\centering
\begin{subfigure}{.5\textwidth}
  \centering
  \includegraphics[width=.98\linewidth]{Pictures/Health-15.PNG}
  \caption{Starting health of 15}
  \label{fig:sub1}
\end{subfigure}%
\begin{subfigure}{.5\textwidth}
  \centering
  \includegraphics[width=.98\linewidth]{Pictures/Health-255.PNG}
  \caption{Cheated health of 255}
  \label{fig:sub2}
\end{subfigure}
\caption{Changing the character's health using memory address values}
\label{fig:test}
\end{figure}

\indent It should be noted that these memory addresses can change. The students noticed that the address for health changed between 0x0200B7D0 and 0x0200B7F0. \\

\subsection{Giving The Player Items}
The use of being able to give the player any item is an exceptionally easy way to beat a game of any kind. In Powder the player can find a myriad of items through the chambers that the player traverses. The final item, the Heart of Baezl'Bub, is the ultimate item needed to be able to complete the game. \\
\indent Since each item doesn't have a specific in-game value to keep track of, finding the memory addresses of certain items can not be found using the emulator's cheat finding tool. Thus, the students turned to trial and error with the emulator's memory viewer tool. Below is a screen shot of this trial and error used. \\

\begin{figure}[h!]
    \centering
    \includegraphics[width = 300]{Pictures/Memory-Testing.PNG}
    \caption{A memory block that has been changed with 0xFF and 0x00 values}
    \label{fig:my_label}
\end{figure} \\

\newpage
  
\indent As seen above, the top part of the memory addresses, as well as toward the middle, have been changed with random values. In this situation the students were changing a small portion of the memory addresses at a time and then checking back at the game to see what has changed. The game would either malfunction, crash, or just not change at all. Toward testing near the addresses that contained the health and other important character information the lab students were able to find the addresses that contain the information of the inventory as well as the items within it. This next screen shot shows the setup of the memory addresses for the inventory. \\

\begin{figure}[h!]
    \centering
    \includegraphics[width = 300]{Pictures/Item-Giving-Memory-Addresses.PNG}
    \caption{Memory addresses that pertain to in-game inventory}
    \label{fig:my_label}
\end{figure} \\

\indent Near the middle of the screen shot it can be seen that the addresses have a certain pattern to them. This pattern appears to be a setup of two 0xFF values and then two random values below. The students theorize that the two 0xFF addresses contain the design and outline of the inventory, as changing any of these values will remove the outlines from the inventory and crash the game. Take for example the table below.

\begin{table}[h!]
\centering
    \begin{tabular}{|l|l|l|l|}
    \hline
    Starting Memory Address & First Value & Second Value & In-Game               \\ \hline
    0x0200C049              & 0xFF        & 0xFF         & Inventory Slots       \\
    0x0200C059              & 0x82        & 0x01         & Row 1 Inventory Items \\
    0x0200C069              & 0xFF        & 0xFF         & Inventory Slots       \\
    0x0200C079              & 0x3B        & 0x01         & Row 2 Inventory Items \\
    \hline
    \end{tabular}
\end{table} \\

\indent Changing the values of the inventory items (0x0200C059) will change the first item of the players inventory. This value can be between 0x01 and 0x87. In this instance, the value is at 0x82. This value corresponds with the item value for The Heart of Baezl'Bub.

\subsubsection{Beating the Game at the Start}

Since the students now know how to manipulate the correct memory addresses to obtain any item they would like, it is easy to complete the game within 30 seconds. At the start of the game the students would need to find the memory addresses that contain the inventory pattern talked about in the previous section of this lab report. These addresses can vary in their positioning in memory but are almost always near the addresses for health. Next the first inventory slot item value would need to be changed to 0x82. This value will then change the first slot starting item to the Heart as shown below. \\

\begin{figure}[h!]
    \centering
    \includegraphics[width = 350]{Pictures/Heart.PNG}
    \caption{The Heart of Baezl'Bub at the start of the game}
    \label{fig:my_label}
\end{figure} \\

Now that the Heart is obtained the player can climb up the ladder to the surface. This can be done off the start because the game does not check for other variables such as: playtime or spaces moved or monsters slain. It only checks whether or not the player has the heart in their inventory.

% Laboratory experimental results
\section{Laboratory Experimental Results}
Overall, the students were able to beat the game in 3 hours, 10 minutes, and 20 seconds. After defeating Baezl'bub the students encountered several problems on the way back to the surface. Most notably the narrator said the character must \textit{"Learn Humility"} and turned them into a slug or spider on several occasions. This proved an issue because the memory location for the health changed. This required the students to search for the new health location in order to make themselves invincible again. In addition, around level 11 on the way back to the surface the student's character was killed several times because it was turned to stone. To avoid this the students had to change the route they took to get to the next ladder. The students found the most time consuming aspect to be killing the creatures that appeared in their path. As the students were approaching hell more and more creatures appeared on each level, however on the way back to the surface it appeared that these enemies did not re spawn. This first approach, completing the game completely with a minimal amount of cheats, proved useful with learning the games mechanics. \\
\indent Through using the information found from beating the game the first time, the students were then able to find the more advanced cheats to help beat the game almost instantly. This screen shot shows the students beating the game in 30 seconds; something that would be completely impossible without the help of cheats. \\

\begin{figure}[h!]
    \centering
    \includegraphics[width = 350]{Pictures/Beating-The-Game.PNG}
    \caption{Beating Powder in 30 seconds}
    \label{fig:my_label}
\end{figure}

\newpage

\indent Below is a table showing all of the important memory addresses found. Changing the values of each of these memory addresses would change important things within the game itself, most of the time to the advantage of the player.

\begin{table}[h!]
\begin{tabular}{|l|l|ll|l|}
\hline
MEMORY ADDRESS & NEW VALUE & WHAT IT CONTROLS &  \\ \hline
0200B7D0       & FF        & HEALTH           &  \\
0200B7D1       & 71        & HEALTH BIT 2     &  \\
0200B7D4       & FF        & MAGIC LEVEL      &  \\
0200B7D5       & 75        & MAGIC BIT 2      &  \\
0200B7D8       & FF        & EXPERIENCE LEVEL      &  \\
0200D249       & FF        & SCROLL XYZZY     &  \\
0200FA69      & FF        & SCROLL OF FOL LORCS     &  \\
02013621      & FF        & ERA WEB SCROLL      &  \\
0201AA09       & FF        & CYAN POTION      &  \\
0201AC08      & FF        & SPIDER HEALTH      &  \\
02023E50      & FF        & SLUG HEALTH      &  \\
0200C059        & 82        & Change first slot item into heart & \\
\hline
\end{tabular}
\caption{List of Memory Addresses Found}
\label{my-label}
\end{table}

% Discussion
\section{Discussion}
The students believed that they had found the location of the dungeon level (0200B7C0), however when this was changed the dungeon level did not change. Instead a fuzzy, black box was placed over the character, similar to what is over rooms in the dungeon when the character is not in them. The students could not figure out why this happened. Further investigation of this memory address did not prove useful in changing the level that the player was. The students needed to find another way to beat the game within easily in one sitting. \\
\indent The memory addresses liked to move around a lot, usually with each new game. This made finding the memory addresses on a new game a hassle. Sometimes anticipated addresses wouldn't be in the spot that the students thought they would be in, meaning time needed to be taken to find these new spots in memory.

% Conclusion
\section{Conclusion}


% Recommendations
\section{Recommendations}
The students would recommend to find the location of the health first. This will make the character invincible and allow them to look for other locations without risking dying and starting the game over. In addition, it is highly recommended to use the save state and load state features on the emulator. This will help the student if they get stuck, or somehow die, to not lose all of their progress. The memory locations change each time a new game is started. Therefore by being able to save and load the game students will not lose their progress in what memory locations they have found. When the student is on their way back to the surface they should use the mini map to view their location and the location of the ladders. The character is represented as a white square while the ladders are represented by dark green squares. This will save a lot of time that would have been spent wandering around in a blind search. 

% Laboratory reflection
\section{Laboratory reflection}
I, Julia Sorrentino, enjoyed completing this lab although it was time consuming. I spent a great deal of time trying to find different memory locations, however there were several times that I thought I had found the correct address, but when it was changed the game froze or nothing happened. I spent the greatest amount of time trying to kill the creatures that would attack my character. Looking back, I should have developed more cheats before attempting to beat the game, due to the fact that it took me over three hours. Overall, I enjoyed the concept of this lab.
\newline\indent I, Adam Cunningham, really liked this lab. I remember back in the days of online flash games I became very experienced with the use of a program named Cheat Engine. This tool is much like the cheat finder tool in the emulator. It would search through changing values in memory addresses to find the one that I wanted to change. Mainly I would use this for simple games such as the Bloons Tower Defense games about 6 years ago. Other things that reminded me of this lab was the GameShark cheating tool for the Game Boy Advance. I used this to cheat in the game Pokemon Emerald back in middle school. Something I saw at the time is that each cheat used an addresses and hex value in the format Address:Hex. I never knew what this meant or why it worked at the time, I only cared about the fact that it worked how I expected it to. Thanks to this lab I finally understand how these cheats work on a basic level.
\newline\indent I, Quintin Carvalho,

% References 
\section{References}

\newpage

% Appendices
\section{Appendix}

\begin{figure}[h!]
    \centering
    \includegraphics[width = 350]{Pictures/Win1.PNG}
    \caption{Win with minimal amount of cheats}
    \label{fig:my_label}
\end{figure} \\

\end{document}
