\documentclass[12pt]{article}
\usepackage[utf8]{inputenc}
\usepackage[margin=1in]{geometry}
\usepackage{times}
\usepackage{setspace}
\usepackage{graphicx}
\usepackage{amssymb}% http://ctan.org/pkg/amssymb
\usepackage{pifont}% http://ctan.org/pkg/pifont
\newcommand{\cmark}{\ding{51}}%
\newcommand{\xmark}{\ding{55}}%

\linespread{1}
\setlength{\parindent}{0.5in}

\newcommand\tab[1][0.5in]{\hspace*{#1}}
\renewcommand*{\thefootnote}{\arabic{footnote}}

% Cover
\title{\vspace{-3cm}
    \rule{\linewidth}{0.5mm} \\
    \huge {ECE 256: Foundations of Cyber Security } \\ [18pt]
    \large Lab 4: Buffer Overflow Attacks \\
    \rule{\linewidth}{0.5mm} \\[0.25in]
    \date{}
}

\begin{document}
\clearpage\maketitle
\begin{center}
\Large We certify that this work is original and not a product of anyone’s work but our own \\ [1.25in]

\noindent\begin{tabular}{ll}
\centering
    \makebox[3in]{\hrulefill} & \makebox[3in]{\hrulefill}\\
    \large{Adam Cunningham (acunningham3)} & \large{Julia Sorrentino (juliasorrentino)}\\[8ex]
\end{tabular}
\noindent\begin{tabular}{l}
    \makebox[3in]{\hrulefill}\\
    \large{Quintin Carvalho (Quintin Carvalho)}\\[20ex]
\end{tabular}

\date{\Large Submitted: November 26th, 2018 \\ \Large Due: November 26th, 2018} \\[1.25in]
\thispagestyle{empty}
\end{center} 

% Contents
\newpage\setcounter{page}{1} 
\tableofcontents
\listoffigures
\listoftables
\newpage

%Abstract
\renewcommand*\abstractname{\Large\textbf{Abstract}}
\begin{abstract}
\setlength{\parindent}{0.5in}
\linespread{1}\selectfont\normalsize\noindent
\indent This lab report includes a basic introduction of the process of buffer overflow attacks and defense to the lab students. This lab consisted of three main parts completed over one week. The goal for the part was for the lab group to design a payload that allows the students (attackers) to change their account balance, based on that they know their PIN number. After the attack the account name and PIN must be the same. The second part requires students to change the target account's PIN. This attack should not change either of the account's balance. The third and final part requires the students to change the original code and make it more secure.

\end{abstract}

% Introduction
\section{Introduction}
Discovered back in early 1972, [4] a buffer overflow is when data written to a buffer exceeds the buffer's boundaries and simultaneously writes to adjacent buffer memory locations. This can cause certain variables and/or actions to be overwritten. A hacker can use this exploit to input malicious code or abnormally change values to their liking. [4] With the earliest attack being one of the several exploits used by the Morris Worm in 1988. [4]\\
\indent A code implementation can use a variation of different values; these values can be stored in adjacent memory addresses within the running system's memory. If one of these values exceeds their limit, and overflows, the remaining information will be put into the next adjacent memory address.\\
\indent For instance, a programmer can create two variables, a character (char) variable, and a floating point (float) variable, next to each other. In the program memory the char will take up 8 bits in a targeted memory address. Since the float is declared after the character variable, the next 32 bits in the program memory will store the value of the float. If a value of 9 bits or higher is written into the char during run-time then the value of the remaining bit will overflow into the first bit of the float. Meaning a value that is 40 bits long will fill both variables if input into the character variable.\\
\indent These exploits can be avoided by double checking code statements to make sure that any input buffers are limited. Omission of library functions such as: scanf, strcpy, and get. [3] These functions don't have boundary checks meaning a buffer overflow can occur without the aid of an if statement to help limit the value of information that can be input.

%Methods
\section{Methods and Procedures}
This lab utilized Visual Studio to run a C program provided by the TA. The program emulated a bank as a possible program for the attacker to be able to change their PIN code. 

\subsection{Payload}
The first part of the lab requires students to change the attackers balance without changing the pin number or name. On the program given to students there is a comment in the testAttack function which says, \textit{your attack here}. This is where students should add their code to create their attack. By adding the line of code: \textit{changePin(\&attacker)} students are able to change the PIN more than once. After adding this line of code students should run the program without debugging. This will open up a terminal window which will display the two accounts pin numbers and beginning balances. The program will ask the user to enter their old pin. They should enter the attackers original pin number and press enter. Then the terminal will ask for the user to enter a new pin. This is where the students will overflow the input to change the account balance. As shown in Figure 1, students should enter the attackers pin number followed by four random characters and then the target account's name. By overflowing the array pin, which can just hold 4 digits, the account balance will change. The students must also include the target's name due to the fact that this is deleted when the program is overflowed. The students should then use this new pin to change the pin back to its original four-digit code.

\begin{figure}[h!]
    \centering
    \includegraphics[width=0.45\textwidth]{part1.PNG}
    \caption{Part 1 Terminal Display}
\end{figure}

\subsection{Change Target PIN}
The second part of the lab requires students to change the target account's pin without changing their balance. Similar to part 1 the students will be calling the changePin function several times in the testAttack function. However, they will be calling it three extra times opposed to one extra time. In addition, the attack will happen when the pin is being changed, the same way it was in the first part. The first pin change should be in the order of: the attackers four-digit pin, four random characters, the target's account name, fourteen characters, then the target's new four-digit pin. This will need to be inputted again when the program asks for the old pin. The second new pin should be in the order of: the attackers four-digit pin, four random characters, and the target's account name. This will need to be inputted again when the program asks for the old pin. The final new pin should just be the attacker's four-digit pin. When the program asks for the old pin the user should type the four-digit pin followed by 20 random characters and then the attacker's account name. Upon completion of these steps the only changes to the accounts should be the attacker's balance and the target's pin. These steps can be seen in Figure 2 below.

\newpage

\begin{figure}[h!]
    \centering
    \includegraphics[width=0.45\textwidth]{part2.PNG}
    \caption{Part 2 Terminal Display}
\end{figure}

\subsection{Increase Security}
The final part of the lab requires students to improve the system by finding at least two different ways to make the code more secure. The students decided to add their security measures to the changePin function. First they nested the if statement inside a new if statement that checked to see if the variable holding the pin was more than four digits. If it is not exactly four-digits the program will print to the user that the pin must be four digits and not let them type anything else in. The second change students made to the function is that the program truncates the inputs to four digits. This means that if the user inputted "67890543" the program would only read "6789". Both of these changes can be seen in the code in figure 3 below. Overall, they both make the program more secure from buffer overflow attacks.

\begin{figure}[h!]
    \centering
    \includegraphics[width=0.4\textwidth]{changes.PNG}
    \caption{Security Improvements}
\end{figure}

% Laboratory experimental results
\section{Laboratory Experimental Results}
This entire lab revolved around the use of the programming language, C/C++. The students knew that they had to overflow the array name which was 20 characters long, and pin which was 4 characters long. In addition, a floating point is only made up of 32 bits. These facts must be taken into account when attempting the attack. In the printAcct function pin, name and amount are all truncated. However, when printed the pin number has the ability to be more than four digits. The students also noticed weaknesses in the code. The main problem with using strcopy is that it does not check the bound so the student must write code to manually check the bounds. This is the reason that the students decided to limit the input of the old pin to four digits. \\

\begin{table}[h!]
    \centering
    \begin{tabular}{l|l|l}
    Test Made                                       & Pass      & Fail      \\ \hline \hline
    Get program running correctly                   & \cmark    &           \\
    Change pin correctly                            & \cmark    &           \\
    Use overflow to change account value            &           & \xmark    \\
    Use overflow to change name of account          & \cmark    &           \\
    Use overflow to change structure values         & \cmark    &           \\
    Add nulls to scan to print blank space          &           & \xmark    \\
    \end{tabular}
    \caption{BankApp.c Testing}
\end{table} \\

Shown in the above table most overflow attacks were successful. However, looking at the pictures in the Appendix of this lab report, these overflows undesirably changed other values of the output. This is the main problem that the students faced. After much testing, it was found that adding more than one changePin function to be called will grant the student more flexibility with changing desired values using the buffer overflow. This addition in the main function is what helped the students to be able to complete this lab successfully.
\indent For the security increase a simple if statement was implemented to limit the amount of characters that can be passed to the scanf and strcpy functions. This eradicates any use of overflows on the buffer. Through full completion of this lab, the students have gained a great amount of experience using buffer overflow attacks.

% Discussion
\section{Discussion}

Every piece of this lab required students to work with a C script. The students found themselves looking up a myriad of commands within the language such as scanf and strcpy. The command scanf terminates at white space. This must be taken into account when performing the attack due to the fact that the student cannot use spaces for the random characters used to fill up space. The main problem with using strcpy is that it does not check the bound so the student must write code to manually check the bounds. One of the changes made to increase security involved truncating the input for pin. The only problem with truncating the pin is if the student enters the correct pin followed by random digits. The program will read the correct pin and ignore everything that follows. This lab requires a lot of research online as well as a lot of trial and error. Due to this it is very helpful to seek help from another group, the TA, or even the professor.

% Conclusion
\section{Conclusion}
This lab provided a good insight into the utilization and understanding of a simple buffer overflow attack. It was shown that a buffer overflow attack is successful due to it's ability to simply exploit a software coding mistake and gain access to a system. When there is more data in a buffer then it can handle it overflows into adjacent storage. Cybercriminals can then exploit that overflow, which corrupts or overwrites the adjacent memory, by either running arbitrary code or manipulating the coding errors to implement malicious actions such as altering the execution path of an application. Failing to allocate large enough buffers and neglecting to check for buffer overflow problems within the code is the most common causes for buffer overflow. It was found that avoiding standard library functions such as scanf and strcpy helps with preventing buffer overflow because these functions are not bound checked. Vigilant coding, regular testing, and bounds checking at run time are all good solutions for preventing buffer overflow attacks.

% Recommendations
\section{Recommendations}
It is highly recommended that every student has some sort of practice dealing with buffer overflow attacks either trying to implement one to inject malicious code or taking measures against it. Having knowledge of this attack will benefit students in the future especially if they will be writing code that requires a higher degree of security. Background information on how the two included library functions (scanf and strcpy) work with buffers will be beneficial in completion of this lab. Other small amounts of information, such as the bit lengths of certain variables in memory, are also important to research beforehand. Lastly, access to an ASCII Table for reference will be helpful.

% Laboratory reflection
\section{Laboratory reflection}
I, Julia Sorrentino, found this lab difficult to complete. I spent a great deal of time trying to teach myself how a buffer overflow attack works. A great deal of time was spent inputting different amount of characters to figure out how many were needed to overflow the space. This trial and error method was very tedious and time consuming, however in the end I found it to be an effective means of completing this lab. Overall, this lab proved not that difficult after figuring out you can use changePin multiple times. The most difficult part of this lab was the first part due to the fact that once we figured it out the rest of the lab went a lot smoother and quicker to complete.
\newline\indent I, Adam Cunningham, underwent several hours of trial and error with these directed buffer overflow tasks. I knew the final part of the lab, the security improvements, would be simple; since it would consist of adding an if statement to limit the number of characters that can be inserted into the changePin function. So I went to work on the first two components of the first lab. I also knew that the solution of the first part would lead to a similar solution of the second (both having to do with changing certain values using the overflow). I knew beforehand that a buffer overflow is the leakage of bits in memory addresses, so, using Visual Studio, I figured out how to monitor the memory addresses and where the variables were put into the memory by the program. I could then see what values would be changed corresponding to the value I put in on the terminal. Unfortunately, the trial and error ran our group in circles as we couldn't figure out how to append the variables with null characters. Thus, a roadblock was hit and no progress was made. Luckily, Julia was able to solve our problems with changing the values over the break. I wish I could have helped more but I was in Florida for the duration of the week we had to spend on this lab.
\newline\indent I, Quintin Carvalho, spent hours researching buffer overflow attacks and learning to use various useful virtual studio tools to monitor memory addresses which allowed me then alter my attack procedures based on what I recorded. This was by far my favorite lab because I found it to be the most hands on and intuitive. I have learned a lot while working on this lab and recommend other students to do the same.

% References 
\section{References}
\noindent [1]“C Library Function - Scanf().” Www.tutorialspoint.com, Tutorials Point, www.tutorialspoint.com \newline \tab /c\_standard\_library/c\_function\_scanf.htm.

\noindent [2] “The Strcpy() Function in C.” The Do While Loop in C - OverIQ.com, overiq.com/c-programming\newline \tab/101/the-strcpy-function-in-c/.

\noindent [3] “What Is a Buffer Overflow? Learn About Buffer Overrun Vulnerabilities, Exploits & Attacks,”\newline \tab CA Veracode, 25-Jul-2018. [Online]. Available: https://www.veracode.com/security/buffer\newline \tab-overflow. [Accessed: 25-Nov-2018].

\noindent [4] Wikipedia contributors. Buffer overflow [Internet]. Wikipedia, The Free Encyclopedia; 2018
\newline \tab Nov 14, 03:51 UTC [cited 2018 Nov 26]. Available: https://en.wikipedia.org/w/index.php?
\newline \tab title=Buffer\_overflow&oldid=868739566.  [Accessed 25-Nov-2018].
\newpage

% Appendices
\section{Appendix}

\begin{figure}[h!]
    \centering
    \includegraphics{original.PNG}
    \caption{The student's original attempts at changing the attacker account balance. As shown, the problem occurs when the other values change undesirably}
\end{figure}

\begin{figure}[h!]
    \centering
    \includegraphics[width = 500]{memory.PNG}
    \caption{A place in memory where the variables are all stored; as known by the attacker and target ASCII on the right}
\end{figure}

\end{document}
