\documentclass[12pt]{article}
\usepackage[utf8]{inputenc}
\usepackage[margin=1in]{geometry}
\usepackage{times}
\usepackage{setspace}
\usepackage{graphicx}

\linespread{1}
\setlength{\parindent}{0.5in}

\newcommand\tab[1][0.5in]{\hspace*{#1}}
\renewcommand*{\thefootnote}{\arabic{footnote}}

% Cover
\title{\vspace{-3cm}
    \rule{\linewidth}{0.5mm} \\
    \huge {ECE 256: Foundations of Cyber Security } \\ [18pt]
    \large Lab 3: DDoS Attacks \\
    \rule{\linewidth}{0.5mm} \\[0.25in]
    \date{}
}

\begin{document}
\clearpage\maketitle
\begin{center}
\Large We certify that this work is original and not a product of anyone’s work but our own \\ [1.25in]

\noindent\begin{tabular}{ll}
\centering
    \makebox[3in]{\hrulefill} & \makebox[3in]{\hrulefill}\\
    \large{Adam Cunningham (acunningham3)} & \large{Julia Sorrentino (juliasorrentino)}\\[8ex]
\end{tabular}
\noindent\begin{tabular}{l}
    \makebox[3in]{\hrulefill}\\
    \large{Quintin Carvalho (Quintin Carvalho)}\\[20ex]
\end{tabular}

\date{\Large Submitted: November 12th, 2018 \\ \Large Due: November 12th, 2018} \\[1.25in]
\thispagestyle{empty}
\end{center} 

% Contents
\newpage\setcounter{page}{1} 
\tableofcontents
\listoffigures
\listoftables
\newpage

%Abstract
\renewcommand*\abstractname{\Large\textbf{Abstract}}
\begin{abstract}
\setlength{\parindent}{0.5in}
\linespread{1}\selectfont\normalsize\noindent
\indent  This lab report includes a basic introduction of the process of distributed denial of service (DDoS) attacks and defense to the lab students. This lab consisted of three main parts completed over several weeks. The goal for the first week was for the lab group to create a web server and defend it. The web server must be built using Python and run on the Raspberry Pi. The second week of the lab consisted of writing a DDoS attack script using Python. This script will target other groups servers in an attempt to take them down. The final piece of the lab requires the completion of the first two parts. During lab class all groups will attack the student's server. In addition, each group will attack each other individually. These attacks will be timed and it will be recorded which servers crash and which withstand the attacks. Overall this lab will introduce students to writing DDoS attack and defense python scripts.

\end{abstract}

% Introduction
\section{Introduction}
Cryptography is the process of changing the characters within a message to keep private information confidential. To another person, this encrypted message would look like a jumble of symbols and letters. Those who have the key to decrypting the file will be able to read and understand its contents. Governments, companies, and virtually anyone can/will use cryptography to protect vital information.\\
\indent Cryptography can be seen as far back as World War II. Any superpower during the World War would send encrypted information between missionaries. A famous example being Nazi Germany's enigma machine. This machine had billions of combinations of encryption keys and was thought impossible to decode. As history would say, this encryption method was eventually broken by Great Britain to help win the war. Upon decrypting the messages, Great Britain was able to secure vital information about Nazi troops' whereabouts, naval plans, and several other of Germany's strategic tactics.\\
\indent Nowadays, encryption is largely used to protect online information. When a user inputs credit card information into a website that takes payment, the information that user inserts is quickly encrypted when sent to the server. If anyone bypasses the website's security, these encryptions will keep that user's credit card information secure. Of course, every encryption can, and will be, decrypted eventually.

%Methods
\section{Methods and Procedures}
The first portion of this lab is to extract our file from the Raspberry Pi and then encrypt that file. The original file contents can be found in the Appendix of this lab report.\\

\subsection{File Encryption}
Below is the final encryption scheme created by Julia for this file. This algorithm makes use of a shift-based encryption method.

\begin{figure} [h!]
    \centering
    \includegraphics{Pictures/Encryption.png}
    \caption{Code to encrypt original file}
\end{figure}
\newpage

\indent After opening the target file, "Group5Lab2.txt", the contents are then read into a string named \textit{var}. Two other variables are also created: an array named \textit{characters} and an integer named \textit{count}. Next a for loop using an incrementor i is created. I will look through the contents of var, character by character, and perform tasks accordingly. In this case, during each iteration, i will first be used to store the ASCII number of the targeted character in var. This number is then shifted by the number stored in count. On the first iteration, count = 0, so the character will remain unchanged. This can also be said for every 8th iteration, because when count is smaller than or equal to 7, count will reset back to 0.\\
\indent Another important aspect of this for loop is the if statement embedded within. The if statement checks if the ASCII value of i == 10. This statement is used to remove any missing characters that the program is trying to print. The reason for missing characters is because the ASCII code 10 is equivalent to a newline. Newline is not a character so the program doesn't understand what to append to the characters array, thus a missing character is added. If the ASCII code 10 is detected, then the program will change the number to 90 instead.\\
\indent After the program runs through each and every character of the input file, the file is then closed and the characters from the characters array are written to a new file "target5j.txt". Below is the output encryption of the file.

\begin{figure} [h!]
    \centering
    \includegraphics[width = \textwidth] {Pictures/Encrypted-File.png}
    \caption{Encrypted file after encryption execution}
\end{figure}

\subsection{Decrypting Encrypted File}
Decrypting the file that the user just encrypted should just involve doing the opposite of what was done to encrypt the file. First open a new python file and write the heading as done with the encryption. Then the student can begin typing their code. Firstly, they will need to open the file that they wish to decrypt and place it into a variable. This command is \textit {variable = open(“filetobedecrypted.txt”, “r”)}. The “r” allows the program to read the file. The next line will put the last variable read into a new variable. This command will be \textit {newvariable = variable.read()} this will allow the program to read the file. Students will also need to create a list to hold all the encrypted characters. This command will be \textit {nameoflist = []}. The decrypting of the characters will be done inside of a for loop which goes through each character of the given text document. This command is \textit {for i in var}. Once inside of the loop students will need to convert every character to its American Standard Code for Information Interchange (ASCII) value correspondent using the command \textit {i = ord(i)}. To undo the brute force of the new line characters the if loop will have to read if \textit {(i-count) == 90:}. This will mean the loop will only be executed if the ASCII value minus the count is exactly equal to 90 as that is what we brute forced it to be. Inside the loop it will add the count to ten and assign that to i. This will allow the ASCII value to return to ten when it is shifted left based on the count. Outside of the if loop, yet still inside the initial for loop is where the characters will get shifted back. The shift line will read \textit {i -= count} as it is shifting left to undo the right shift used to encrypt the file. After each character is shifted it must be turned back into its character form using the command \textit {i =chr(i)}. Then these new characters must be appended to the list variable using the command \textit {nameoflist.append(i)}. After this the count will increment and be checked. This will complete the initial for loop.Below is the code for decryption which was written by Julia.

\newpage

\begin{figure} [h!]
    \centering
    \includegraphics[width = 250]{Pictures/d5.png}
    \caption{Code to decrypt original file}
\end{figure}

\newline \tab	Outside of the for loop the new list of characters will have to be written into a new document. The first command to be used is \textit {nameoflist = ‘’ .join(nameoflist)}, this will store the characters into the list as a string. Next, proper programming syntax is to close the files when the user is done using them. To close the original text document the command \textit {filetobedecrypted.txt.close()} will need to be used. Then the student will want to open a new file to store the encrypted characters into, \textit {decrytptedfile = open(“decrypted.txt”, “w”)}. This will open a new text file and set the permissions to write. Then the command \textit {decryptedfile.write(nameoflist)} can be used to overwrite the new file with the characters in the list. Finally the team will want to close this file as well using the previous command. When this code is run it will decrypt the file back to its original state of the poem. The full code can be seen in figure 2 located in the appendix.

\subsection{Decrypting the Assigned Team’s File}
The first step of decrypting the assigned team’s file is to secure the file. To do this the user must login to the other team’s raspberry pi and  use the get command to bring it into their own raspberry pi. In the terminal they must type \textit {sftp -P 2204 pi@134.88.48.68} this means secure file transfer port 2204 (the other team’s specified port) and the ip address of the pi. To copy the file to their own pi they must use the command \textit {get target4.txt}. By typing “exit” or “quit” will allow the user to leave the pi and go back into the Linux environment. Here they are able to open to file into a text editor using \textit {gedit target4.txt}.
\newline \tab Once the team has transferred the target file into their own account they can begin running different decryption algorithms to decrypt the message. They should use the programming language, Python, to write their algorithm. They should use the output of their algorithms to find a pattern and try to use it to decrypt the message by hand. Then they can write a program that emulates the pattern to completely decrypt the file. \\
\indent Now begins the process of decrypting the target file. Below is a python script that will accurately decrypt the target file.\\

\begin{figure} [h!]
    \centering
    \includegraphics[width = 200]{Pictures/Target-Decryption.png}
    \caption{Code to decrypt target file}
\end{figure}

As described in the laboratory experiment results, the encrypted file has a few specific patterns that the group of students were able to discover. One being that every other character is an exclamation point. This provokes the use of the if statement \textit{if i != 33}. Using this statement will tell the program to omit any characters that resemble an exclamation point. Furthermore, a shifting pattern was also discovered upon hand writing the ASCII characters from the encrypted file. This pattern shifted the first character backward by 7, the second character backward by 4, the third character backward by 6, and the fourth character backward by 7. Although not every character was tested by hand, the students saw it safe to assume that this pattern looped throughout.\\
\indent As seen in the script above, these four different conditions are met through the use of several if statements. Throughout the for loop of this program, a variable \textit{reset} is conditioned to keep track of the amount of shifts completed. After each shift, a 1 is added to the total value of the variable. Once this variable reaches a certain number, in this case 4, the reset variable will be brought back down to a value of 1, thus repeating the sequence again. Through these iterations a couple of different operations are completed: when the reset variable equals 1 the ASCII value will be shifted backward by 7, when the reset variable equals 2 the ASCII value will be shifted backward by 4, when the reset variable equals 3 the ASCII value will be shifted backward by 6, and when the reset variable equals 4 the ASCII value will be shifted backward by 7. \\
\indent Upon execution of this program through the LINUX terminal, the target file will be successfully decrypted and a new file named "decrypted4.txt" will be created. Inside this text file will include the original passage, \textit{Song of Myself by Walt Whitman} The decrypted file is shown in the laboratory experimental results.

% Laboratory experimental results
\section{Laboratory Experimental Results}
This entire lab revolved around the use of the programming language, Python. Encryption is extremely important in computer security as to secure data from sources trying to steal valuable information. The exact encryption used can be seen in figure 1 in the appendix. This is the same that was explained in the methods section, but with different variable names. In addition, the exact decryption used can be seen in figure 2 in the appendix. Again, it is the same as explained in the methods, but with different variable names. By using a simple Caesar cipher students are able to observe how it changes a file, as well as how to change that file back to its original form. 	
\newline \tab Upon first glance of team four’s encrypted file it was quite noticeable that every other character was an exclamation point. This was taken into account, and the code that was written to decrypt the message turned every exclamation point into a null. When attempting to decrypt the rest of the file the team began just testing a single shift and noticed that when shifted left seven there were spaces and possible pieces of words. Due to the fact that each team had a poem every file’s first should be title, author. From this information the partially decrypted file told that their author’s first name was four letters, possibly starting with a “W”. In addition, the last name was seven characters, possibly ending in “an”. This information was taken into account and upon doing a quick Google search for famous poets. The name, Walt Whitman, was found and when looking at his famous poems it was known that the title had three words, the first having four characters, second having two characters and third having six characters. It was quickly found that Whitman’s poem “Song of Myself” fit the description. Using this information the first two lines of the poem were written out and the pattern of shifts to be left seven, four, six and seven. Now that the pattern was found all that was needed is to write code that would take this information into effect to decrypt the file on the computer. \\
\indent A code was quickly written to account for these very specific shifts. After much testing with undesirable results, a final, successful, script was implemented. This python script would shift each letter a certain amount of spaces and account for the exclamation points that occurred every other character. A portion of the final decryption can be found below.

\begin{figure} [h!]
    \centering
    \includegraphics[width = 400]{Pictures/Decrypted-File.png}
    \caption{Final decryption of the target file}
\end{figure}

Through full completion of this lab, the students have gained a great amount of experience working within the python to encrypt and decrypt files as well as becoming acquainted with using the Raspberry Pis.

% Discussion
\section{Discussion}
Almost every piece of this lab required students to write a python script.  The students found themselves looking up a myriad of commands within the language. Such as how to read and write to a file and how to convert characters to their ASCII equivalent. These Google searches gained better insight for how certain commands would help to complete the task at hand, as well as, why they would help to complete the task at hand. As for using the Raspberry Pi, the students found Google did not always provide the necessary information and for this fact they turned to the lab’s TA for help. For all of these systems the commands are very specific; so although it may look right it may not run properly. Due to this it is very helpful to seek help from another group, the TA, or even the professor.

% Conclusion
\section{Conclusion}
Although time consuming, this lab was found to be a simple look into encrypting and decrypting files. This lab also gives powerful insight into the world that is cryptography. As seen with this lab group's trivial programs, cryptography can easily, and quickly, become complex. Imagine how extreme business and government cryptography methods would be at this point in history. In addition, it allowed students to begin working with the Raspberry Pi as the device will be used throughout the rest of the semester. Overall, the experiences from this lab will greatly benefit the group of students for further lab reports and classes.

% Recommendations
\section{Recommendations}
I would highly recommend that every student to get comfortable and familiar with the programming language, Python, before beginning this lab. This will save a lot of time during the lab period as students will not have to spend a great deal of time researching basic commands. In addition, dedicate some time during the lab to using the Raspberry Pi, being sure you are able to navigate around inside of it and locate the original file. In addition, I highly recommend that students take the time to write out their encrypted file by hand. This will ensure that the output file is correct and is extremely helpful in troubleshooting your code.

% Laboratory reflection
\section{Laboratory reflection}
I, Julia Sorrentino, had a difficult time completing this lab. During the first week of this lab I found myself clueless about writing an encryption in python. The first lab period was spent trying to write a key stream cipher that we recognized on the PowerPoint. However, it became clear to me that I did not understand how they worked and I was merely copying other people’s work from online sources. It was after this that I decided that we had to go much simpler with our encryption. I spent the next week teaching myself the basics of Python and how to create a simple Caesar cipher via YouTube videos and other online sources listed in the reference section. 
\newline \tab The second lab period was spent creating a much more complicated Caesar cipher. This can be seen in figure 7 in the appendix. The idea was to not have a constant shift so every time through the loop we added one more shift to the right. The problem soon arose that the characters went out of bounds of ASCII. This caused us to create a function that reset the count to one when the shift put the character out of range. The character that would have been out of range was shifted left two. We soon encountered another problem that the ASCII for a new line is 10. This means that when it was shifted we had a command as opposed to a character. When this was printed out it appeared as a box with a question mark in it. To move around this problem we brute forced each new line to the character n. Later, I realized this would be part of the problem in not being able to decipher the encrypted file. After spending several days and countless hours attempting to decipher our own file I could not decipher more than the first line. I came to the conclusion that it was most likely impossible and returned to the drawing board. 
\newline \tab Once again I began with a simple Caesar cipher that shifted each character right two. I decided that this would be too easily decrypted by other teams so I created a count to change the shift. This was used as our final encryption as shown in figure 1. Although the Caesar cipher is not super complicated I knew another team was waiting to decrypt our file and I figured it was better to have a working encryption and decryption rather than not having anything to turn in. Overall, I found this lab to be very time consuming, but the more time I put into it the more I understood what I was doing. For this reason I found it helpful in learning python and encrypting/decrypting files.
\indent I, Adam Cunningham, worked with Julia on the first implementation of the encryption script. This first script was successful at encrypting the file, but it was so complex that we couldn't decrypt it ourselves. Thus, it was scraped and changed to a simpler one that Julia created. Afterwards I helped Julia to create a script to decrypt our target file. She had already discovered the encryption that group 4 used to code their file. She gave me what work she had with the character shifts and I went to work writing the decryption script. Mainly, creating and debugging the script wasn't very difficult. The shifts were straight forward to reverse engineer. It did, however, take a little more troubleshooting and debugging than I was expecting. Such errors with index ranges and index types are what confused me the most. At last I was able to execute the program and completely decrypt the target file with pinpoint accuracy.

% References 
\section{References}
[1] “2. Built-in Functions¶.” 2. Built-in Functions - Python 2.7.15 Documentation, \newline \tab docs.python.org/2/library/functions.html.

\noindent[2] “Caesar Cipher.” Invent with Python, inventwithpython.com/chapter14.html.

\noindent[3] “Learn Python - Full Course for Beginners.” YouTube, YouTube, 11 July 2018, ]			\newline \tab{www.youtube.com/watch?v=rfscVS0vtbw.}

\newpage

% Appendices
\section{Appendix}
\begin{figure} [h!]
    \centering
    \includegraphics{Pictures/Original-File.png}
    \caption{Original text file extracted from Raspberry Pi}
\end{figure}

\begin{table}[h!]
    \centering
        \begin{tabular}{|ll|ll|ll|}
        \hline
        Dec & Char & Dec & Char & Dec & Char \\ \hline
        33  & !    & 64  & @    & 97  & a    \\
        34  & "    & 65  & A    & 98  & b    \\
        35  & \#   & 66  & B    & 99  & c    \\
        36  & \$   & 67  & C    & 100 & d    \\
        37  & \%   & 68  & D    & 101 & e    \\
        38  & \&   & 69  & E    & 102 & f    \\
        39  & '    & 70  & F    & 103 & g    \\
        40  & (    & 71  & G    & 104 & h    \\
        41  & )    & 72  & H    & 105 & i    \\
        \hline
        \end{tabular}
    \caption{Small portion of an ASCII Table}
    \label{my-label}
\end{table}

\begin{figure} [h!]
    \centering
    \includegraphics[width = 200]{Pictures/orig.png}
    \caption{Original Encryption Code}
\end{figure}


\end{document}
