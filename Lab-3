\documentclass[12pt]{article}
\usepackage[utf8]{inputenc}
\usepackage[margin=1in]{geometry}
\usepackage{times}
\usepackage{setspace}
\usepackage{graphicx}

\linespread{1}
\setlength{\parindent}{0.5in}

\newcommand\tab[1][0.5in]{\hspace*{#1}}
\renewcommand*{\thefootnote}{\arabic{footnote}}

% Cover
\title{\vspace{-3cm}
    \rule{\linewidth}{0.5mm} \\
    \huge {ECE 256: Foundations of Cyber Security } \\ [18pt]
    \large Lab 3: DDoS Attacks \\
    \rule{\linewidth}{0.5mm} \\[0.25in]
    \date{}
}

\begin{document}
\clearpage\maketitle
\begin{center}
\Large We certify that this work is original and not a product of anyone’s work but our own \\ [1.25in]

\noindent\begin{tabular}{ll}
\centering
    \makebox[3in]{\hrulefill} & \makebox[3in]{\hrulefill}\\
    \large{Adam Cunningham (acunningham3)} & \large{Julia Sorrentino (juliasorrentino)}\\[8ex]
\end{tabular}
\noindent\begin{tabular}{l}
    \makebox[3in]{\hrulefill}\\
    \large{Quintin Carvalho (Quintin Carvalho)}\\[20ex]
\end{tabular}

\date{\Large Submitted: November 12th, 2018 \\ \Large Due: November 12th, 2018} \\[1.25in]
\thispagestyle{empty}
\end{center} 

% Contents
\newpage\setcounter{page}{1} 
\tableofcontents
\listoffigures
\listoftables
\newpage

%Abstract
\renewcommand*\abstractname{\Large\textbf{Abstract}}
\begin{abstract}
\setlength{\parindent}{0.5in}
\linespread{1}\selectfont\normalsize\noindent
\indent  This lab report includes a basic introduction of the process of distributed denial of service (DDoS) attacks and defense to the lab students. This lab consisted of three main parts completed over several weeks. The goal for the first week was for the lab group to create a web server and defend it. The web server must be built using Python and run on the Raspberry Pi. The second week of the lab consisted of writing a DDoS attack script using Python. This script will target other groups servers in an attempt to take them down. The final piece of the lab requires the completion of the first two parts. During lab class all groups will attack the student's server. In addition, each group will attack each other individually. These attacks will be timed and it will be recorded which servers crash and which withstand the attacks. Overall this lab will introduce students to writing DDoS attack and defense python scripts.

\end{abstract}

% Introduction
\section{Introduction}
A DOS (Denial of Service) attack is used to deny intended users access to a specific server or website. Through flooding the server's resources, or breaking the server's inner mechanics, the server is brought offline, thus giving users an error code or denying any access to the website itself.
\indent Symptoms that a service is currently experiencing, or has experienced, a DOS attack include: 
\begin{itemize}
    \item Slow access to website / file access or transfer
    \item Inability to access a website
    \item Disconnection of wired or wireless connection
\end{itemize} \\

Several web services that give anyone the ability to DOS anything are currently available online. As well as countless amounts of DOS programs and code that others have uploaded on the internet for anyone to use. Most of these systems use a single, or a handful of attacking methods to ruin the accessibility of the designated webserver. The most common example of a flood could be the ICMP Flood. This attack sends millions of modified packets to the targeted IP address or webserver to use up it's resources and put if offline. \\
\indent If the target is a larger service or server then the attacker might want to make use of a botnet or a distributed attack to take down the service. A distributed attack takes the resources from multiple computers to run the attack on the targeted webserver. Theoretically, with enough power from a multitude of computers, an attacker could take down even the largest of websites and services. \\
\indent Another popular method of flooding a server is a Synchronous Flood Attack. A webserver usually communicates with requests from a computer by sending an Acknowledgement after that computer sends the server a SYN. The way a SYN flood works is that the program will open several SYN/ACK connections that are only half completed, i.e the webserver doesn't get the chance to send the program an acknowledgement back. As the amount of half connections increases, the webserver will slow to a halt. \\
\indent Services such as CloudFlare help website owners to protect against DOS attacks at a very successful rate. However, there are standalone techniques to protect against DOS attacks. An effective method is to redirect the IP address that is found to be sending, or requesting, a massive amount of damage to the server. This can easily be bypassed through IP spoofing however. Other cloaks can be used to monitor the incoming traffic before giving the user access to the website. If this user is found suspicious then the server will deny entry through a filtering service.

%Methods
\section{Methods and Procedures}
This lab resulted in the creation of three python scripts. One created a web server, one pinged a server to see if it was up or down, and one attacks other groups servers. All python scripts must begin with \textit{\#!/bin/python}. The next few lines will contain any libraries that need to be imported. Then the main program will begin.

\subsection{Creating a Webserver}
Creating a server is an important skill for someone to understand and master. Creating a web server in python is a fairly easy task and if you have right hardware you can create a fairly decent server. To create a server in python, using the socket module is the backbone of most python web service modules. All network transactions happen between clients and servers. In most protocols the clients asks a certain address and receive data. Within each address multiple servers can run at the same time however, the limit to how many is in the hardware. Each service is associated with a port and each port is bound to a socket. The server then listens to its associated port and outputs information when requests are received on that port. To affect a network connection you need to know the host name and the port number. Most web servers run on port 80 however to avoid conflict our server will run on port 8080. If these port numbers are used you need to find a new port number and notify the user of the change. As long as the client ask for the correct service on the right port at the right address, communication will still happen. To begin with the code for creating a socket the first step is to import the socket libraries using the \textit{import socket} command. Next the server needs to know the host to which it is to be associated to and which port to listen on. Therefore, \textit{Host} and \textit{Port} were both set equal to our respected arguments taken in by the system. Whether to request information or to serve it, in order to access the internet, we need to create a socket. The syntax for this call is \textit{[variable] = socket.socket([family],[type])}. As shown in our web server code below our socket followed this syntax: \textit{SocketServer.TCPServer((Host,Port),Handler)}. There is a print statement, \textit{print "serving at port", Port} to show which port we are serving on along with a command to continue serving the client, \textit{httpd.serve-forever()}. Lastly, as the closing acts of the request we need to close the file object and the server client. \textit{client-connection.sendall(http-response)
client-connection.close()}.
\pagebreak

\begin{figure}[h!]
    \centering
    \includegraphics[width=1.45\textwidth]{webserver.png}
    \caption{Python Code for Web Server}
\end{figure}

\subsection{Pinging a Server}
Pinging a server is an important ability for an attacker and a server owner. The owner will want to make sure that their server has not been taken down by an attack while the attacker will want to know when their target server has fallen. The students created a python script which printed to the user every two seconds if the server they selected is up or down. The script begins with five imports: os, time, socket, urllib2, and sys. Each of these allows the programmer to use special commands within the language. The program takes two inputs; the first is the ip address of the target and the second is the port of the target. The script is made of the function internet\_on. The program will continue to run through this function until it is manually stopped or the program times out. As shown in the figure below the program uses a try, except statement. The function will try to open the server at the port and if it can it will print that the port is up. If it cannot connect then it will print that the server is done. The code: \textit{time.sleep(2)} pauses the program for two seconds before running again.
\pagebreak

\begin{figure}[h!]
    \centering
    \includegraphics[width=0.35\textwidth]{ping.PNG}
    \caption{Python Code for Server Ping}
\end{figure}

\subsection{Creating a DDoS Attack}
The final task for this lab was to create a Denial of Service attack and use that to take down other lab groups' webservers. Below is a portion of the full implementation.

\begin{figure} [h!]
    \centering
    \includegraphics[width = \textwidth] {Attack-Headers.png}
    \caption{DOS Machine Headers}
\end{figure} \\

\indent This section of the script creates a list of different machine IDs that will ultimately be used to request information from the targeted URL. Using this method gives the attack a better chance to bypass simple security measures put in place by the webserver, as each agent is chosen by random during the attack; overall, showing a level of human input within this automated process. \\
This next section of the code shows the execution portion of the script.

\begin{figure} [h!]
    \centering
    \includegraphics[width = \textwidth]{Attack-Execution.png}
    \caption{DOS Execution Commands}
\end{figure} \\

This implementation first checks that the input arguments will suffice and not throw an error during execution. Next the program then starts the attack by printing an indication as well as the time of the attack. A third argument, "safe", can be input into the command line to have the attack stop after taking a server offline. This way the computer executing the attack won't over use its own resources. Finally the execution runs through a for loop 500 times. During each iteration, a threading service is used to drive the server requests. During these iterations, the program also monitors each request to and prints to standard out how many requests have been sent. This is an easy way for the lab students to know that the attack is properly sending requests to the target URL. These iterations continue on for an infinite amount of time, of until the server gets taken offline.

\subsection{Battle Royale}
During lab class of the third week of working on the lab each groups server will be tested to show the capabilities of their attack and defense. To test their defense all other groups will attack the server at once. The attack will last for a time specified by the TA. If the server is still running after this time then the group will have proven their defense works. To test the attack capabilities of the group, they will attack all the other groups once at a time and tally how many groups they are able to crash.  he attack will last for a time specified by the TA. If the server is not running after this time has expired then the group will have proven their attack works.

% Laboratory experimental results
\section{Laboratory Experimental Results}
This entire lab revolved around the use of the programming language, Python. Defending a web server from a DDoS attack is extremely important in computer security as to websites from being crashed from unwanted predators. The exact web server used can be seen in figure 1 in the appendix. This is the same that was explained in the methods section. In addition, the exact DDoS attack used can be seen in figure 2 in the appendix. Again, it is the same as explained in the methods. By using a Smurf attack students are able to send large amounts of internet control message protocol (ICMP) ping traffic to the target server. The reply address is spoofed to the intended victim. Due to the fact that a single internet broadcast address can support a maximum of 255 hosts a smurf attack amplifies a single ping 255 times. This results in the network being slowed down to a point where it is impossible to use. 	
\newline \tab 
Through full completion of this lab, the students have gained a great amount of experience working within python to create DDoS defensive and offensive scripts as well as becoming acquainted with using their Raspberry Pis to connect to other groups.

% Discussion
\section{Discussion}
Every piece of this lab required students to write a python script. The students found themselves looking up a myriad of commands within the language as well as a plethora of libraries such as os, time, socket, urllib2, and sys. This lab requires a lot of research online as well as a lot of trial and error. Due to this it is very helpful to seek help from another group, the TA, or even the professor.

% Conclusion
\section{Conclusion}

% Recommendations
\section{Recommendations}

% Laboratory reflection
\section{Laboratory reflection}
I, Julia Sorrentino, found this lab difficult to complete. I spent a great deal of time trying to teach myself how to create a DDoS attack and defense via YouTube videos and other online sources listed in the reference section. I spent hours taking notes, however found very few examples online to use as a basis for creating our scripts. Overall, I found this lab to be very time consuming, but opposed to previous labs, the more time I put into it I still did not understand what I was doing. 
\newline\indent I, Adam Cunningham, 
\newline I, Quintin Carvalho, found this lab very interesting but very difficult to implement as well. I had to do allot of research in order to be able to understand the code and I feel that I now have a better understanding but am still confused on certain things. I will have to keep on trying to learn this material and not give up because it is very important and crucial that I have these skills for when I get a job.
% References 
\section{References}
[1] Labs, Wallaroo. DDoS Attack Detection with Wallaroo: A Real-Time Time Series Analysis \newline \tab Example, blog.wallaroolabs.com/2017/11/ddos-attack-detection-with-wallaroo-a-real-\newline \tab time-time-series-analysis-example/.


\noindent[2] “DoS (Denial of Service) Attack Tutorial: Ping of Death, DDOS.” Meet Guru99 - \newline \tab Free Training Tutorials & Video for IT Courses, www.guru99.com/ultimate-guide-to-dos\newline \tab -attacks.html.

\noindent[3] Zamurai™. “How to DDoS Using Scripts (Python/Perl) *2018*.” YouTube, YouTube, 29 \newline \tab Sept. 2016, www.youtube.com/watch?v=kMsFlbPtSCI.

\noindent[4] Ruslan's Blog - Lets Build a Web server
\newline \tab https://ruslanspivak.com/lsbaws-part1/

\newpage

% Appendices
\section{Appendix}



\end{document}
